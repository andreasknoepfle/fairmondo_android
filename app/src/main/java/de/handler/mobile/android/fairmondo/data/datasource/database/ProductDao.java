package de.handler.mobile.android.fairmondo.data.datasource.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT.
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Slug = new Property(1, String.class, "slug", false, "SLUG");
        public final static Property TitleImageUrl = new Property(2, String.class, "titleImageUrl", false, "TITLE_IMAGE_URL");
        public final static Property HtmlUrl = new Property(3, String.class, "htmlUrl", false, "HTML_URL");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property PriceCents = new Property(5, Integer.class, "priceCents", false, "PRICE_CENTS");
        public final static Property TagCondition = new Property(6, String.class, "tagCondition", false, "TAG_CONDITION");
        public final static Property TagFair = new Property(7, Boolean.class, "tagFair", false, "TAG_FAIR");
        public final static Property TagEcologic = new Property(8, Boolean.class, "tagEcologic", false, "TAG_ECOLOGIC");
        public final static Property TagSmallAndPrecious = new Property(9, Boolean.class, "tagSmallAndPrecious", false, "TAG_SMALL_AND_PRECIOUS");
        public final static Property TagBorrowable = new Property(10, Boolean.class, "tagBorrowable", false, "TAG_BORROWABLE");
        public final static Property TagSwappable = new Property(11, Boolean.class, "tagSwappable", false, "TAG_SWAPPABLE");
        public final static Property SellerNickname = new Property(12, String.class, "sellerNickname", false, "SELLER_NICKNAME");
        public final static Property SellerLegalEntity = new Property(13, Boolean.class, "sellerLegalEntity", false, "SELLER_LEGAL_ENTITY");
        public final static Property SellerHtmlUrl = new Property(14, String.class, "sellerHtmlUrl", false, "SELLER_HTML_URL");
        public final static Property Donation = new Property(15, String.class, "donation", false, "DONATION");
    };

    private DaoSession daoSession;


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SLUG' TEXT," + // 1: slug
                "'TITLE_IMAGE_URL' TEXT," + // 2: titleImageUrl
                "'HTML_URL' TEXT," + // 3: htmlUrl
                "'TITLE' TEXT," + // 4: title
                "'PRICE_CENTS' INTEGER," + // 5: priceCents
                "'TAG_CONDITION' TEXT," + // 6: tagCondition
                "'TAG_FAIR' INTEGER," + // 7: tagFair
                "'TAG_ECOLOGIC' INTEGER," + // 8: tagEcologic
                "'TAG_SMALL_AND_PRECIOUS' INTEGER," + // 9: tagSmallAndPrecious
                "'TAG_BORROWABLE' INTEGER," + // 10: tagBorrowable
                "'TAG_SWAPPABLE' INTEGER," + // 11: tagSwappable
                "'SELLER_NICKNAME' TEXT," + // 12: sellerNickname
                "'SELLER_LEGAL_ENTITY' INTEGER," + // 13: sellerLegalEntity
                "'SELLER_HTML_URL' TEXT," + // 14: sellerHtmlUrl
                "'DONATION' TEXT);"); // 15: donation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(2, slug);
        }
 
        String titleImageUrl = entity.getTitleImageUrl();
        if (titleImageUrl != null) {
            stmt.bindString(3, titleImageUrl);
        }
 
        String htmlUrl = entity.getHtmlUrl();
        if (htmlUrl != null) {
            stmt.bindString(4, htmlUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        Integer priceCents = entity.getPriceCents();
        if (priceCents != null) {
            stmt.bindLong(6, priceCents);
        }
 
        String tagCondition = entity.getTagCondition();
        if (tagCondition != null) {
            stmt.bindString(7, tagCondition);
        }
 
        Boolean tagFair = entity.getTagFair();
        if (tagFair != null) {
            stmt.bindLong(8, tagFair ? 1l: 0l);
        }
 
        Boolean tagEcologic = entity.getTagEcologic();
        if (tagEcologic != null) {
            stmt.bindLong(9, tagEcologic ? 1l: 0l);
        }
 
        Boolean tagSmallAndPrecious = entity.getTagSmallAndPrecious();
        if (tagSmallAndPrecious != null) {
            stmt.bindLong(10, tagSmallAndPrecious ? 1l: 0l);
        }
 
        Boolean tagBorrowable = entity.getTagBorrowable();
        if (tagBorrowable != null) {
            stmt.bindLong(11, tagBorrowable ? 1l: 0l);
        }
 
        Boolean tagSwappable = entity.getTagSwappable();
        if (tagSwappable != null) {
            stmt.bindLong(12, tagSwappable ? 1l: 0l);
        }
 
        String sellerNickname = entity.getSellerNickname();
        if (sellerNickname != null) {
            stmt.bindString(13, sellerNickname);
        }
 
        Boolean sellerLegalEntity = entity.getSellerLegalEntity();
        if (sellerLegalEntity != null) {
            stmt.bindLong(14, sellerLegalEntity ? 1l: 0l);
        }
 
        String sellerHtmlUrl = entity.getSellerHtmlUrl();
        if (sellerHtmlUrl != null) {
            stmt.bindString(15, sellerHtmlUrl);
        }
 
        String donation = entity.getDonation();
        if (donation != null) {
            stmt.bindString(16, donation);
        }
    }

    @Override
    protected void attachEntity(Product entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // slug
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // titleImageUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // htmlUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // priceCents
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tagCondition
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // tagFair
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // tagEcologic
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // tagSmallAndPrecious
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // tagBorrowable
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // tagSwappable
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sellerNickname
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // sellerLegalEntity
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sellerHtmlUrl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // donation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSlug(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitleImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHtmlUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPriceCents(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTagCondition(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTagFair(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setTagEcologic(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setTagSmallAndPrecious(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setTagBorrowable(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setTagSwappable(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setSellerNickname(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSellerLegalEntity(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setSellerHtmlUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDonation(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
