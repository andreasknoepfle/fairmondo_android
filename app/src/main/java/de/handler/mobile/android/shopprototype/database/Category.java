package de.handler.mobile.android.shopprototype.database;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CATEGORY.
 */
public class Category implements android.os.Parcelable {

    private Long id = -1L;
    private String name = "";
    private String desc = "";
    private Integer parent_id = -1;
    private Integer lft = -1;
    private Integer rgt = -1;
    private Integer depth = 0;
    private Integer children_count = 0;
    private Integer weight = 0;
    private Integer view_columns = 0;
    private String slug = "";

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryDao myDao;

    private List<ProductCategory> productCategories;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Category() {
    }

    public Category(Long id) {
        this.id = id;
    }

    public Category(Long id, String name, String desc, Integer parent_id, Integer lft, Integer rgt, Integer depth, Integer children_count, Integer weight, Integer view_columns, String slug) {
        this.id = id;
        this.name = name;
        this.desc = desc;
        this.parent_id = parent_id;
        this.lft = lft;
        this.rgt = rgt;
        this.depth = depth;
        this.children_count = children_count;
        this.weight = weight;
        this.view_columns = view_columns;
        this.slug = slug;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Integer getParent_id() {
        return parent_id;
    }

    public void setParent_id(Integer parent_id) {
        this.parent_id = parent_id;
    }

    public Integer getLft() {
        return lft;
    }

    public void setLft(Integer lft) {
        this.lft = lft;
    }

    public Integer getRgt() {
        return rgt;
    }

    public void setRgt(Integer rgt) {
        this.rgt = rgt;
    }

    public Integer getDepth() {
        return depth;
    }

    public void setDepth(Integer depth) {
        this.depth = depth;
    }

    public Integer getChildren_count() {
        return children_count;
    }

    public void setChildren_count(Integer children_count) {
        this.children_count = children_count;
    }

    public Integer getWeight() {
        return weight;
    }

    public void setWeight(Integer weight) {
        this.weight = weight;
    }

    public Integer getView_columns() {
        return view_columns;
    }

    public void setView_columns(Integer view_columns) {
        this.view_columns = view_columns;
    }

    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ProductCategory> getProductCategories() {
        if (productCategories == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductCategoryDao targetDao = daoSession.getProductCategoryDao();
            List<ProductCategory> productCategoriesNew = targetDao._queryCategory_ProductCategories(id);
            synchronized (this) {
                if(productCategories == null) {
                    productCategories = productCategoriesNew;
                }
            }
        }
        return productCategories;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetProductCategories() {
        productCategories = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public Category(Parcel dest) {
        id = dest.readLong();
        name = dest.readString();
        desc = dest.readString();
        parent_id = dest.readInt();
        lft = dest.readInt();
        rgt = dest.readInt();
        depth = dest.readInt();
        children_count = dest.readInt();
        weight = dest.readInt();
        view_columns = dest.readInt();
        slug = dest.readString();
    }


    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeString(name);
        dest.writeString(desc);
        dest.writeInt(parent_id);
        dest.writeInt(lft);
        dest.writeInt(rgt);
        dest.writeInt(depth);
        dest.writeInt(children_count);
        dest.writeInt(weight);
        dest.writeInt(view_columns);
        dest.writeString(slug);
    }

    public static final Parcelable.Creator<Category> CREATOR
            = new Parcelable.Creator<Category>() {
        public Category createFromParcel(Parcel in) {
            return new Category(in);
        }

        public Category[] newArray(int size) {
            return new Category[size];
        }
    };
    // KEEP METHODS END

}
