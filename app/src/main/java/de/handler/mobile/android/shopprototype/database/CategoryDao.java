package de.handler.mobile.android.shopprototype.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CATEGORY.
*/
public class CategoryDao extends AbstractDao<Category, Long> {

    public static final String TABLENAME = "CATEGORY";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Desc = new Property(2, String.class, "desc", false, "DESC");
        public final static Property Parent_id = new Property(3, Integer.class, "parent_id", false, "PARENT_ID");
        public final static Property Created_at = new Property(4, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(5, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Lft = new Property(6, Integer.class, "lft", false, "LFT");
        public final static Property Rgt = new Property(7, Integer.class, "rgt", false, "RGT");
        public final static Property Depth = new Property(8, Integer.class, "depth", false, "DEPTH");
        public final static Property Children_count = new Property(9, Integer.class, "children_count", false, "CHILDREN_COUNT");
        public final static Property Weight = new Property(10, Integer.class, "weight", false, "WEIGHT");
        public final static Property View_columns = new Property(11, Integer.class, "view_columns", false, "VIEW_COLUMNS");
        public final static Property Slug = new Property(12, String.class, "slug", false, "SLUG");
    };

    private DaoSession daoSession;


    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CATEGORY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'DESC' TEXT," + // 2: desc
                "'PARENT_ID' INTEGER," + // 3: parent_id
                "'CREATED_AT' INTEGER NOT NULL ," + // 4: created_at
                "'UPDATED_AT' INTEGER NOT NULL ," + // 5: updated_at
                "'LFT' INTEGER," + // 6: lft
                "'RGT' INTEGER," + // 7: rgt
                "'DEPTH' INTEGER," + // 8: depth
                "'CHILDREN_COUNT' INTEGER," + // 9: children_count
                "'WEIGHT' INTEGER," + // 10: weight
                "'VIEW_COLUMNS' INTEGER," + // 11: view_columns
                "'SLUG' TEXT);"); // 12: slug
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CATEGORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        Integer parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindLong(4, parent_id);
        }
        stmt.bindLong(5, entity.getCreated_at().getTime());
        stmt.bindLong(6, entity.getUpdated_at().getTime());
 
        Integer lft = entity.getLft();
        if (lft != null) {
            stmt.bindLong(7, lft);
        }
 
        Integer rgt = entity.getRgt();
        if (rgt != null) {
            stmt.bindLong(8, rgt);
        }
 
        Integer depth = entity.getDepth();
        if (depth != null) {
            stmt.bindLong(9, depth);
        }
 
        Integer children_count = entity.getChildren_count();
        if (children_count != null) {
            stmt.bindLong(10, children_count);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(11, weight);
        }
 
        Integer view_columns = entity.getView_columns();
        if (view_columns != null) {
            stmt.bindLong(12, view_columns);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(13, slug);
        }
    }

    @Override
    protected void attachEntity(Category entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desc
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // parent_id
            new java.util.Date(cursor.getLong(offset + 4)), // created_at
            new java.util.Date(cursor.getLong(offset + 5)), // updated_at
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // lft
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // rgt
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // depth
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // children_count
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // weight
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // view_columns
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // slug
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParent_id(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCreated_at(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUpdated_at(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setLft(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRgt(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDepth(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setChildren_count(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setWeight(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setView_columns(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSlug(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Category entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Category entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
