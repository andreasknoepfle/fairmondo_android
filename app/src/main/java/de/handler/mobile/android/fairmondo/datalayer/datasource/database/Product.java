package de.handler.mobile.android.fairmondo.datalayer.datasource.database;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PRODUCT.
 */
public class Product {
    // KEEP FIELDS - put your custom fields here
    private Long id;
    private String slug = "";
    private String titleImageUrl = "";
    private String htmlUrl = "";
    private String title = "";
    private Integer priceCents = -1;

    private String tagCondition = "";
    private Boolean tagFair = false;
    private Boolean tagEcologic = false;
    private Boolean tagSmallAndPrecious = false;
    private Boolean tagBorrowable = false;
    private Boolean tagSwappable = false;

    private String sellerNickname = "";
    private Boolean sellerLegalEntity = false;
    private String sellerHtmlUrl = "";

    private String donation = "";
    // KEEP FIELDS END

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductDao myDao;

    private List<ProductCategory> productCategories;

    public Long getId() {
        return id;
    }

    public String getSlug() {
        return slug;
    }

    public String getTitleImageUrl() {
        return titleImageUrl;
    }

    public String getHtmlUrl() {
        return htmlUrl;
    }

    public String getTitle() {
        return title;
    }

    public Integer getPriceCents() {
        return priceCents;
    }

    public String getTagCondition() {
        return tagCondition;
    }

    public Boolean getTagFair() {
        return tagFair;
    }

    public Boolean getTagEcologic() {
        return tagEcologic;
    }

    public Boolean getTagSmallAndPrecious() {
        return tagSmallAndPrecious;
    }

    public Boolean getTagBorrowable() {
        return tagBorrowable;
    }

    public Boolean getTagSwappable() {
        return tagSwappable;
    }

    public String getSellerNickname() {
        return sellerNickname;
    }

    public Boolean getSellerLegalEntity() {
        return sellerLegalEntity;
    }

    public String getSellerHtmlUrl() {
        return sellerHtmlUrl;
    }

    public String getDonation() {
        return donation;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public void setTitleImageUrl(String titleImageUrl) {
        this.titleImageUrl = titleImageUrl;
    }

    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void setPriceCents(Integer priceCents) {
        this.priceCents = priceCents;
    }

    public void setTagCondition(String tagCondition) {
        this.tagCondition = tagCondition;
    }

    public void setTagFair(Boolean tagFair) {
        this.tagFair = tagFair;
    }

    public void setTagEcologic(Boolean tagEcologic) {
        this.tagEcologic = tagEcologic;
    }

    public void setTagSmallAndPrecious(Boolean tagSmallAndPrecious) {
        this.tagSmallAndPrecious = tagSmallAndPrecious;
    }

    public void setTagBorrowable(Boolean tagBorrowable) {
        this.tagBorrowable = tagBorrowable;
    }

    public void setTagSwappable(Boolean tagSwappable) {
        this.tagSwappable = tagSwappable;
    }

    public void setSellerNickname(String sellerNickname) {
        this.sellerNickname = sellerNickname;
    }

    public void setSellerLegalEntity(Boolean sellerLegalEntity) {
        this.sellerLegalEntity = sellerLegalEntity;
    }

    public void setSellerHtmlUrl(String sellerHtmlUrl) {
        this.sellerHtmlUrl = sellerHtmlUrl;
    }

    public void setDonation(String donation) {
        this.donation = donation;
    }

    public void setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
    }

    public void setMyDao(ProductDao myDao) {
        this.myDao = myDao;
    }

    public void setProductCategories(List<ProductCategory> productCategories) {
        this.productCategories = productCategories;
    }

    public Product(Long id, String slug, String titleImageUrl, String htmlUrl, String title, Integer priceCents, String tagCondition, Boolean tagFair, Boolean tagEcologic, Boolean tagSmallAndPrecious, Boolean tagBorrowable, Boolean tagSwappable, String sellerNickname, Boolean sellerLegalEntity, String sellerHtmlUrl, String donation) {
        this.id = id;
        this.slug = slug;
        this.titleImageUrl = titleImageUrl;
        this.htmlUrl = htmlUrl;
        this.title = title;
        this.priceCents = priceCents;
        this.tagCondition = tagCondition;
        this.tagFair = tagFair;
        this.tagEcologic = tagEcologic;
        this.tagSmallAndPrecious = tagSmallAndPrecious;
        this.tagBorrowable = tagBorrowable;
        this.tagSwappable = tagSwappable;
        this.sellerNickname = sellerNickname;
        this.sellerLegalEntity = sellerLegalEntity;
        this.sellerHtmlUrl = sellerHtmlUrl;
        this.donation = donation;
    }

    public Product() {
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductDao() : null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ProductCategory> getProductCategories() {
        if (productCategories == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductCategoryDao targetDao = daoSession.getProductCategoryDao();
            List<ProductCategory> productCategoriesNew = targetDao._queryProduct_ProductCategories(id);
            synchronized (this) {
                if(productCategories == null) {
                    productCategories = productCategoriesNew;
                }
            }
        }
        return productCategories;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetProductCategories() {
        productCategories = null;
    }

    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }
}
