package de.handler.mobile.android.shopprototype.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IMAGE.
*/
public class ImageDao extends AbstractDao<Image, Long> {

    public static final String TABLENAME = "IMAGE";

    /**
     * Properties of entity Image.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Image_file_name = new Property(1, String.class, "image_file_name", false, "IMAGE_FILE_NAME");
        public final static Property Image_content_type = new Property(2, String.class, "image_content_type", false, "IMAGE_CONTENT_TYPE");
        public final static Property Image_file_size = new Property(3, Integer.class, "image_file_size", false, "IMAGE_FILE_SIZE");
        public final static Property Image_updated_at = new Property(4, java.util.Date.class, "image_updated_at", false, "IMAGE_UPDATED_AT");
        public final static Property Created_at = new Property(5, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(6, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Imageable_id = new Property(7, Integer.class, "imageable_id", false, "IMAGEABLE_ID");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Is_title = new Property(9, Boolean.class, "is_title", false, "IS_TITLE");
        public final static Property External_url = new Property(10, String.class, "external_url", false, "EXTERNAL_URL");
        public final static Property Image_processing = new Property(11, Boolean.class, "image_processing", false, "IMAGE_PROCESSING");
    };


    public ImageDao(DaoConfig config) {
        super(config);
    }
    
    public ImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IMAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'IMAGE_FILE_NAME' TEXT," + // 1: image_file_name
                "'IMAGE_CONTENT_TYPE' TEXT," + // 2: image_content_type
                "'IMAGE_FILE_SIZE' INTEGER," + // 3: image_file_size
                "'IMAGE_UPDATED_AT' INTEGER," + // 4: image_updated_at
                "'CREATED_AT' INTEGER," + // 5: created_at
                "'UPDATED_AT' INTEGER," + // 6: updated_at
                "'IMAGEABLE_ID' INTEGER," + // 7: imageable_id
                "'TYPE' TEXT," + // 8: type
                "'IS_TITLE' INTEGER," + // 9: is_title
                "'EXTERNAL_URL' TEXT," + // 10: external_url
                "'IMAGE_PROCESSING' INTEGER);"); // 11: image_processing
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IMAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Image entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String image_file_name = entity.getImage_file_name();
        if (image_file_name != null) {
            stmt.bindString(2, image_file_name);
        }
 
        String image_content_type = entity.getImage_content_type();
        if (image_content_type != null) {
            stmt.bindString(3, image_content_type);
        }
 
        Integer image_file_size = entity.getImage_file_size();
        if (image_file_size != null) {
            stmt.bindLong(4, image_file_size);
        }
 
        java.util.Date image_updated_at = entity.getImage_updated_at();
        if (image_updated_at != null) {
            stmt.bindLong(5, image_updated_at.getTime());
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(6, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(7, updated_at.getTime());
        }
 
        Integer imageable_id = entity.getImageable_id();
        if (imageable_id != null) {
            stmt.bindLong(8, imageable_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        Boolean is_title = entity.getIs_title();
        if (is_title != null) {
            stmt.bindLong(10, is_title ? 1l: 0l);
        }
 
        String external_url = entity.getExternal_url();
        if (external_url != null) {
            stmt.bindString(11, external_url);
        }
 
        Boolean image_processing = entity.getImage_processing();
        if (image_processing != null) {
            stmt.bindLong(12, image_processing ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Image readEntity(Cursor cursor, int offset) {
        Image entity = new Image( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // image_file_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image_content_type
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // image_file_size
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // image_updated_at
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // created_at
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // updated_at
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // imageable_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // is_title
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // external_url
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // image_processing
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Image entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImage_file_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_content_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage_file_size(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setImage_updated_at(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setCreated_at(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUpdated_at(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setImageable_id(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIs_title(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setExternal_url(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImage_processing(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Image entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Image entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
